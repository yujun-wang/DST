var app = angular.module("app", [
	'ngResource',
	'ngRoute',
	'ui.gravatar',
	'uiSwitch'
]);

app.run(function($rootScope) {
	$rootScope.user = {};
});

$(function() {
	$('#side-menu').metisMenu();
});

app.config(function($routeProvider, $locationProvider) {
	$routeProvider
		.when('/demo', {templateUrl: "/partials/demo.html"})
		.when('/sign_up', {templateUrl: "/partials/register.html"})
		.when('/users/list', {templateUrl: "/partials/users/list.html"})
		.when('/users/edit/:id', {templateUrl: "/partials/users/edit.html"})
		.otherwise({templateUrl: "/partials/frontpage.html"});
});

// App global controller (also $rootScope)
app.controller('globalController', function($scope, $rootScope, $location, User) {
	// .user {{{
	User.profile().$promise.then(function(data) {
		$scope.setUser(data);
	});
	$rootScope.setUser = function(user) {
		$rootScope.user = user;
		console.log('path:',window.location.pathname);
		console.log('$rootScope.user:',$rootScope.user);
		if ((!user || !user.username) && window.location.pathname != '/login' && window.location.pathname != '/sign_up') {
			window.location = '/login';
			return;
		}
		if (!$rootScope.user.settings)
			$rootScope.user.settings = {};
		_.defaults($rootScope.user.settings, { // Default user options
		});
		$rootScope.$broadcast('changeUser', $scope.user);
	};

	$scope.doLogout = function() {
		console.log("logout!");
		User.logout({}).$promise
			.then(function(user) {
				console.log("after;");
				$rootScope.setUser(null);
				$location.path('/');
			});
	};
	// }}}

	$scope.toggleSidebar = function() {
		if ($(window).width() < 769) {
		    $("body").toggleClass("show-sidebar");
		} else {
		    $("body").toggleClass("hide-sidebar");
		}
	};
});

app.controller('loginController', function($scope, $rootScope, $document, $timeout, $location, User) {
	$scope.username = '';
	$scope.passsword = '';
	$scope.error = '';

	$scope.doLogin = function() {
		User.login({
			username: $scope.username,
			password: $scope.password
		}).$promise
			.then(function(user) {
				console.log("doLogin:",user);
				if (user._id) {
					$rootScope.setUser(user);
					window.location.replace("/");
				} else {
					$scope.error = 'Invalid username or password';
					console.log("$root.user:",$rootScope.user);
					console.log($scope.error);
				}
			});
	};

	$scope.doSignUp = function (form) {
        if (form.$valid) {
            var user = new User();
            // Clean errors array
            $scope.errors = [];

            if (form.$valid) {
                // check if password and password copy match
                if (form.password && form.passwordRepeat && form.passwordRepeat.$modelValue === form.password.$modelValue) {

                } else {
                    $scope.errors.push('passwordsDoesNotMatch');
                }

                // If there is no errors,
                if ($scope.errors.length == 0) {
                    var user = new User();
                    // Fill user with information
                    user.username = $scope.username;
                    user.first_name = $scope.first_name;
                    user.last_name = $scope.last_name;
                    user.dateOfBirth = $scope.dateOfBirth;
                    user.password = $scope.password;
                    user.role = 'user';

                    user.$save(function (user) {
                        console.log('User was succesfully created', user);
                        $rootScope.user = user;
                        $scope.doLogin();
                    }, function (error) {
                        console.error("Failed to create user because of",  error);
                        console.log(error.data.code);
                        if (error.data.code === 11000) {
                            $scope.displayMessage = 'User with this email already exists in our system'
                        }
                    });
                }
            }

        }
    }

	var bindingForAppleDevice = function () {
		$document.bind("keydown", function (event) {
			if (event.keyCode === 20) { setCapsLockOn(true); };
		});

		$document.bind("keyup", function (event) {
			if (event.keyCode === 20) { setCapsLockOn(false); };
		});

		$document.bind("keypress", function (event) {
			var code = event.charCode || event.keyCode;
			var shift = event.shiftKey;

			if (code > 96 && code < 123) { setCapsLockOn(false); }
			if (code > 64 && code < 91 && !shift) { setCapsLockOn(true); }
		});
	}

	var bindingForOthersDevices = function () {
		var isKeyPressed = true;

		$document.bind("keydown", function (event) {
			if (!isKeyPressed && event.keyCode === 20) {
				isKeyPressed = true;
				if ($rootScope.isCapsLockOn != null) { setCapsLockOn(!$rootScope.isCapsLockOn); };
			};
		});

		$document.bind("keyup", function (event) {
			if (event.keyCode === 20) { isKeyPressed = false; };
		});

		$document.bind("keypress", function (event) {
			var code = event.charCode || event.keyCode;
			var shift = event.shiftKey;

			if (code > 96 && code < 123) { setCapsLockOn(shift); }
			if (code > 64 && code < 91) { setCapsLockOn(!shift); }
		});
	}

	if (/Mac|iPad|iPhone|iPod/.test(navigator.platform)) {
		bindingForAppleDevice();
	} else {
		bindingForOthersDevices();
	}

	var setCapsLockOn = function (isOn) {
		$timeout(function() {
			$rootScope.isCapsLockOn = isOn;
		});
	};
});

app.controller('userListController', function($scope, $routeParams, $location, User) {
	$scope.users = [];

	$scope.refresh = function() {
		$scope.users = User.query();
	};
	$scope.refresh();

	// Edit button handler
    $scope.editUser = function (user) {
        $location.path("/users/edit/" + user._id);
    };

     // Delete user handler
    $scope.deleteUser = function (user) {
        if ( confirm("Are you sure you want to delete " + user.name + "?") ){
            user.$delete({_id: user._id});
            $scope.refresh();
        }
    };
});

app.controller('userEditController', function($scope, $routeParams, $location, User) {
	// Hardcode user types
    $scope.roles = [{
        role: "root",
        name: "System Adminstrator"
    },
    {
        role: "admin",
        name: "Administrator"
    },
    {
        role: "user",
        name: 'User'
    }];

	$scope.user = { // Prototype user used when creating new users - set defaults here
		_id: '_new'
	};
	if (!$routeParams.id) // No ID - send back to list
		$location.path('/');
	if ($routeParams.id != 'new') // Not creating a new one? Go fetch it by its ID
		$scope.user = User.get({id: $routeParams.id});

	$scope.saving = false;
	$scope.save = function() {
		$scope.saving = true;
		var query = {};

		if ($scope.user._id != '_new') // Save over existing
			query.id = $scope.user._id;

		User.save(query, $scope.user).$promise.then(function() {
			$location.path("/users/list"); // Redirect back to list when done
		});
	};

	// return to previous page
    $scope.back = function () {
      window.history.back();
    };
});

app.controller('userDeleteController', function($scope, $routeParams, $location, $timeout, User) {
	if (!$routeParams.id) // No ID - send back to list
		$location.path('/users');
	User.delete({_id: $routeParams.id}).$promise.then(function() {
		$timeout(function() { // Timeout added for purely aesthetic reasons
			$location.path('/users'); // Redirect back to list
		}, 3000);
	});
});

/**
* Adds a Bootstrap tooltip confirmation to links or buttons
*
*	<tag tooltip-confirm="dothis()"/>
*
*	<tag tooltip-confirm="dothis()" tooltip-confirm-text="Are you sure?" tooltip-confirm-position="top"/>
*
*	* See scope for more config options
*
* @author Matt Carter <m@ttcarter.com>
* @date 2014-11-04
*/
app.directive('tooltipConfirm', function() {
	return {
		scope: {
			tooltipConfirm: '&?', // Run this on confirm
			tooltipCancel: '&?', // Run this on cancel
			tooltipConfirmText: '@',
			tooltipConfirmPosition: '@?',
			tooltipConfirmContainer: '@?',
			tooltipConfirmTrigger: '@?'
		},
		restrict: 'A',
		controller: function($scope) {
			$scope.doConfirm = function() {
				if ($scope.tooltipConfirm)
					$scope.$eval($scope.tooltipConfirm);
			};

			$scope.doCancel = function() {
				if ($scope.tooltipConfirmCancel)
					$scope.$eval($scope.tooltipConfirmCancel);
			};
		},
		link: function($scope, elem) {
			$scope.$watch('tooltipConfirm + tooltipConfirmText + tooltipPConfirmosition + tooltipCConfirmontainer + tooltipConfirmTrigger', function() {
				var isVisible = $(elem).siblings('.tooltip').length > 0; // Is the tooltip already shown?
				$(elem)
					.tooltip('destroy')
					.tooltip({
						title: 
							'<div class="tooltip-confirm">' +
								'<div class="tooltip-confirm-text">' + ($scope.tooltip || 'Are you sure?') + '</div>' +
								'<div class="tooltip-confirm-btn-group">' +
									'<a class="btn btn-xs btn-success tooltip-confirm-btn-confirm">Yes</a>' +
									'<a class="btn btn-xs btn-danger tooltip-confirm-btn-cancel">No</a>' +
								'</div>' +
							'</div>',
						html: true,
						placement: $scope.tooltipConfirmPosition || 'top',
						container: $scope.tooltipConfirmContainer || null,
						trigger: $scope.tooltipConfirmTrigger || 'click',
						animation: false
					})
					.on('show.bs.tooltip', function(e) {
						if (!$(this).data('ng.tooltip-confirm')) { // Not yet attached events
							$(this).data('bs.tooltip').$tip // Shown - bind to click of buttons
								.on('click', '.tooltip-confirm-btn-confirm', function() {
									$(elem).tooltip('hide');
									$scope.$apply($scope.doConfirm);
								})
								.on('click', '.tooltip-confirm-btn-cancel', function() {
									$(elem).tooltip('hide');
								});
							$(this).data('ng.tooltip-confirm', true);
						}
					});

				
					/*
					.data('bs.tooltip')
					*/

				if (isVisible) // Reshow the tooltip if we WERE using it before
					$(elem).tooltip('show');
			});
		}
	}
});

/**
* Adds a Bootstrap tooltip to an element
*
*	<tag tooltip="hello world"/>
*
*	<tag tooltip="hello world" tooltip-position="bottom" tooltip-container="body" tooltip-trigger="click"/>
*
* @author Matt Carter <m@ttcarter.com>
* @date 2014-11-04
*/
app.directive('tooltip', function() {
	return {
		scope: {
			tooltip: '@',
			tooltipPosition: '@?',
			tooltipContainer: '@?',
			tooltipTrigger: '@?'
		},
		restrict: 'A',
		link: function($scope, elem) {
			$scope.$watch('tooltip + tooltipPosition + tooltipContainer + tooltipTrigger', function() {
				var isVisible = $(elem).siblings('.tooltip').length > 0; // Is the tooltip already shown?
				$(elem)
					.tooltip('destroy')
					.tooltip({
						title: $scope.tooltip,
						placement: $scope.tooltipPosition || 'top',
						container: $scope.tooltipContainer || null,
						trigger: $scope.tooltipTrigger || 'hover',
						animation: false
					});

				if (isVisible) // Reshow the tooltip if we WERE using it before
					$(elem).tooltip('show');
			});
		}
	}
});

/**
* niceDate - Convert any date into a nice string
*/
app.filter('niceDate', function() {
	return function(value) {
		if (!value)
			return;

		var date = moment(value);
		if (date.get('hours') == 0 && date.get('minutes') == 0) {
			return date.format('D/M/YY');
		} else {
			return date.format('H:mma D/M/YY');
		}
	};
});

/**
* pretty - Basic pretty printer
*
* @author Matt Carter <m@ttcarter.com>
*
* This function can be used to pretty print objects or JSON streams
*
* In your templating system:
*	{{foo | pretty}}
*
*/
app.filter('pretty', function() {
	return function(value) {
		if (!value) {
			return 'null';
		} else if (typeof value == 'object') {
			return JSON.stringify(value, null, '\t');
		} else {
			return value.toString();
		}
	};
});

app.factory('User', function($resource) {
	return $resource('/api/users/:id', {}, {
		profile: {url: '/api/profile'},
		login: {url: '/login', method: 'post'},
		logout: {url: '/logout'}
	});
});
