{
  "name": "async-chainable-exec",
  "version": "1.1.0",
  "description": "Plugin for async-chainable that provides exec() support",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/hash-bang/async-chainable-exec"
  },
  "license": "MIT",
  "keywords": [
    "async",
    "async-chainable",
    "exec",
    "spawn"
  ],
  "author": {
    "name": "Matt Carter",
    "email": "m@ttcarter.com"
  },
  "bugs": {
    "url": "https://github.com/hash-bang/async-chainable-exec/issues"
  },
  "homepage": "https://github.com/hash-bang/async-chainable-exec",
  "scripts": {
    "coverage": "istanbul cover node_modules/.bin/_mocha",
    "test": "mocha test"
  },
  "devDependencies": {
    "chai": "^1.10.0",
    "istanbul": "^0.3.5",
    "mocha": "^2.1.0",
    "mocha-istanbul": "^0.2.0"
  },
  "dependencies": {
    "async-chainable": "~1.6.5",
    "spawn-args": "0.0.4"
  },
  "readme": "async-chainable-exec\n====================\nPlugin for [async-chainable](https://github.com/hash-bang/async-chainable) that adds external program execution.\n\n\n\tvar asyncChainable = require('async-chainable');\n\tvar asyncChainableExec = require('async-chainable-exec');\n\n\tasyncChainable()\n\t\t.use(asyncChainableExec)\n\t\t.exec('echo one two three')\n\t\t.end();\n\n\n\tasyncChainable()\n\t\t.use(asyncChainableExec)\n\t\t.exec('dirContents', ['ls', '-l', '-a'])\n\t\t.then(function(next) {\n\t\t\tconsole.log('The directory contains', this.dirContents);\n\t\t\tnext();\n\t\t})\n\t\t.end(function(err) {\n\t\t\tif (err) throw new Error(err);\n\t\t});\n\n\n\tasyncChainable()\n\t\t.use(asyncChainableExec)\n\t\t.exec({\n\t\t\tid: 'myDir',\n\t\t\tcmd: 'bash',\n\t\t\tparams: ['-c', 'echo $PWD'],\n\t\t\tcwd: __dirname,\n\t\t})\n\t\t.then(function(next) {\n\t\t\tconsole.log('My directory is', this.myDir);\n\t\t\tnext();\n\t\t})\n\t\t.end(function(err) {\n\t\t\tif (err) throw new Error(err);\n\t\t});\n\n\n\t# Setting stdio=inherit will output to the console as the program runs\n\tasyncChainable()\n\t\t.use(asyncChainableExec)\n\t\t.execDefaults({stdio: 'inherit'})\n\t\t.exec(['find -type f'])\n\t\t.end(function(err) {\n\t\t\tif (err) throw new Error(err);\n\t\t});\n\n\nAPI\n===\nasync-chainable-exec provides a single function, `exec()` which can be called a number of ways:\n\n\texec(String <name>, Array <cmd + params>) // Execute the command + arguments array and store its response in 'name'\n\texec(String <cmd + params>) // Execute command + arguments (response is still available in `this.exec`)\n\texec(String <name>, String <cmd + params>) // Execute the command + arguments as a string and store its response in 'name'\n\texec(Array <cmd + params>) // Execute the command + arguments array\n\texec(Object) // Pass an object for execution, must contain at least 'cmd' but could contain 'params' as an array and 'id' as a string\n\texec(String <name>, Array <cmd + params>, Object <additional>) // Execute command + arguments from the array using addition spawn arguments and store its response in 'name'\n\texec(String <name>, Object) // Pass an object for execution (see 'Object' definition) and store its response in 'name'\n\nRegardless of whether the exec function is called with a name / id the last executed item is stored in `this.exec` with the following properties:\n\n| Key                                  | Type           |  Description                                                             |\n|--------------------------------------|----------------|--------------------------------------------------------------------------|\n| `this.exec.code`                     | Int            | The exit code of the last executed item                                  |\n| `this.exec.output`                   | Array          | The combined STDOUT and STDERR streams from the last execution           |\n\n",
  "readmeFilename": "README.md",
  "_id": "async-chainable-exec@1.1.0",
  "dist": {
    "shasum": "ae64f3f64d6ec6075280180f6dc4e269324e331b"
  },
  "_from": "async-chainable-exec@~1.1.0",
  "_resolved": "https://registry.npmjs.org/async-chainable-exec/-/async-chainable-exec-1.1.0.tgz"
}
